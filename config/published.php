<?php

return [

    /**-----------------------------------------------------------
     * Classes and Structure
    ------------------------------------------------------------*/
    /*
     * For each module you create, there should be a main module class which defines different module configurations
     * and settings. If you named it 'Module', then in the module root folder there should be a file called 'Module.php'
     * which defines a class called 'Module' which extends the core ItvisionSy\Laravel\Modules\Module class.
     */
    'class_name' => 'Module',
    /*
     * Next two configs defines:
     *  - What is the namespace of the modules directory.
     *  - Where is the modules directory located.
     * Note that your composer autoloader should be able to locate and autoload your files and classes.
     */
    'namespace' => '\\App\\Modules\\',
    'directory' => app_path('Modules'),


    /**-----------------------------------------------------------
     * Store Handler
    ------------------------------------------------------------*/
    /*
     * A store handler is a class full name that implements the interface \ItvisionSy\Laravel\Modules\Interfaces\KeyValueStoreInterface
     * or a callable that will return a class name or an object implements it. Avoid using closures in the config.
     * If you want to use a closure, in your kernel.php call the
     * \ItvisionSy\Laravel\Modules\Modules::setStoreHandler(closure())
     */
    'store_handler' => \ItvisionSy\Laravel\Modules\StoreHandlers\SimpleDbStoreHandler::class,
    /*
     * If you do not provide a store handler, then the following connection will be used to store the settings for you.
     * You will need to initiate the required table by issuing the modules:db:init command.
     * Null means using the default connection
     */
    'default_store_handler_connection' => null,
    /*
     * A key prefix to all non-module entries
     */
    'store_public_prefix_key' => 'modules',
    /*
     * True will make the default status of the modules is enabled if the store can not find an entry for the module
     */
    'modules_enabled_by_default' => false,


    /**-----------------------------------------------------------
     * Routes and URL Generating
    ------------------------------------------------------------*/
    /*
     * A prefix to be added to the routes generated by the module
     * i.e. setting it to modules will prefix the 'sales' module's generated url show/{id} to modules/sales/show/{id}
     */
    'route_prefix' => null,
    /*
     * A prefix to be added to the route names generated by the module
     * i.e. setting it to modules will prefix the 'sales' module's generated url 'show' to 'modules.sales.show'
     */
    'route_name_prefix' => null
];